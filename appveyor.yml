os: Visual Studio 2015
version: "{build}"
environment:
  DOTNET_SDK_BINARIES_DOWNLOAD: "https://download.microsoft.com/download/7/E/8/7E8BD9BD-2892-4848-BA01-76493DECC138/dotnet-dev-win-x64.1.0.0-preview4-004233.zip"
  PINGU_ASSEMBLY_VERSION: 1.0.0
  PINGU_VERSION_FILE: Pingu.version
  DOTNET_INSTALL_DIR: ".dotnetsdk-preview4"
  COVERALLS_REPO_TOKEN:
    secure: rXQYRJDH6xRwjKr+wood5fZ4VnA8MSej+rFO1j7+2rf2aJwTmwma9t+Xqwf/AoVZ
install:
  - ps: |
      # Download .NET Core SDK Preview 4
      if (!(Test-Path $env:DOTNET_INSTALL_DIR)) {
        $tempFile = [System.IO.Path]::GetTempFileName()
        (New-Object System.Net.WebClient).DownloadFile($env:DOTNET_SDK_BINARIES_DOWNLOAD, $tempFile)
        $targetPath = Join-Path $pwd $env:DOTNET_INSTALL_DIR
        Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::ExtractToDirectory($tempFile, $targetPath)
        $env:Path = "$targetPath;$env:Path"
        Remove-Item $tempFile
        dotnet --info
      }
  - ps: |
      # Compute version number
      $pinguVersion = Get-Content $env:PINGU_VERSION_FILE
      $lastVersionBump = $(git log -n 1 --format=format:%h $env:PINGU_VERSION_FILE)
      $commitsSinceLastVersionBump = $(git rev-list --count $lastVersionBump`.`.HEAD)
      if ($env:APPVEYOR_REPO_BRANCH -ne "master") { $branch = "-" + $env:APPVEYOR_REPO_BRANCH }
      $env:PINGU_VERSION="$pinguVersion.$commitsSinceLastVersionBump"
      $env:PINGU_VERSION_AND_BRANCH=$env:PINGU_VERSION + " - Branch: $branch"
      Write-Output ("Pingu version: " + $env:PINGU_VERSION)
assembly_info:
  patch: true
  file: AssemblyInfo.cs
  assembly_version: $(PINGU_ASSEMBLY_VERSION)
  assembly_file_version: $(PINGU_VERSION)
  assembly_informational_version: $(PINGU_VERSION_AND_BRANCH)
before_build:
  - ps: |
      # Prime .NET Core (unpack base reference assemblies)
      New-Item temp -Type Directory | Out-Null
      Push-Location temp
      dotnet new | Out-Null
      Pop-Location
      Remove-Item -Recurse temp
  - ps: |
      # Restore packages for Pingu
      Push-Location .\src\Pingu
      dotnet restore
      Pop-Location
  - ps: |
      # Restore packages for Tests
      Push-Location .\src\Pingu.Tests
      dotnet restore
      Pop-Location
build_script:
  - ps: |
      # Build Pingu
      Push-Location .\src\Pingu
      dotnet build -c Release
      Pop-Location
before_test:
  - ps: |
      # Install OpenCover and ReportGenerator for coverage
      nuget install -OutputDirectory packages -Version 4.6.519 OpenCover
      nuget install -OutputDirectory packages -Version 2.5.1 ReportGenerator
      nuget install -OutputDirectory packages -Version 0.412.0 coveralls.net
test_script:
  - ps: |
      # Run tests & coverage
      $dotnetPath=(Join-Path $pwd (Join-Path $env:DOTNET_INSTALL_DIR dotnet.exe))
      .\packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -register:user -target:"$dotnetPath" `
        -targetargs:"test src\Pingu.Tests\Pingu.Tests.csproj" -output:"coverage.xml" -oldstyle `
        -filter:+[Pingu]*
after_test:
  - ps: |
      # Generate coverage report
      .\packages\ReportGenerator.2.5.1\tools\ReportGenerator.exe -reports:coverage.xml -targetdir:coverage
  - ps: |
      # Upload to Coveralls
      .\packages\coveralls.net.0.412\tools\csmacnz.Coveralls.exe --opencover -i coverage.xml --repoToken $env:COVERALLS_REPO_TOKEN `
        --commitId $env:APPVEYOR_REPO_COMMIT --commitBranch $env:APPVEYOR_REPO_BRANCH --commitAuthor $env:APPVEYOR_REPO_COMMIT_AUTHOR `
        --commitEmail $env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL --commitMessage $env:APPVEYOR_REPO_COMMIT_MESSAGE --jobId $env:APPVEYOR_JOB_ID
  - ps: |
      # Build NuGet package
      if (($env:APPVEYOR_REPO_BRANCH -eq "master") -and ($env:APPVEYOR_PULL_REQUEST_TITLE -eq $null)) {
        Push-Location .\src\Pingu
        dotnet pack -c Release /p:Version=$env:PINGU_VERSION
      }
artifacts:
  - path: 'src\**\*.nupkg'
  - path: coverage
    name: Coverage Report
    type: zip

